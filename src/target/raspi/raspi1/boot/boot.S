.globl _start

.org 0x8000

.section ".text.boot"

.equ RASPI_ENTRY_POINT, 0x8000
.equ RASPI_RELEASE, 0x1
.equ RASPI_MMIOBASE, 0x2000000

.globl RASPI_ENTRY_POINT
.globl RASPI_RELEASE
.globl RASPI_MMIOBASE

// r15 -> should begin execution at 0x8000.
// r0 -> 0x00000000
// r1 -> 0x00000C42 - machine id
// r2 -> 0x00000100 - start of ATAGS
// preserve these registers as argument for kernel_main
_start:
	mov sp, #0x8000
 
	// Clear out bss.
	ldr r4, =__bss_start
	ldr r9, =__bss_end
	mov r5, #0
	mov r6, #0
	mov r7, #0
	mov r8, #0
	b 2f

1:
	// store multiple at r4.
	stmia r4!, {r5-r8}
 
	// If we are still below bss_end, loop.
2:
	cmp r4, r9
	blo 1b
 
	// Call kernel_main
	ldr r3, =kernel_main
	blx r3
 
halt:
	wfe
	b halt
